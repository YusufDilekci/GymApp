// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoreLayer.Entities.Concrete.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CoreLayer.Entities.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"), 1L, 1);

                    b.Property<string>("BranchInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BranchPrice")
                        .HasColumnType("float");

                    b.HasKey("BranchId");

                    b.ToTable("Branches", (string)null);

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            BranchInfo = "üiğiüğğşğşsğaüğ",
                            BranchName = "Fitness",
                            BranchPrice = 1200.0
                        },
                        new
                        {
                            BranchId = 2,
                            BranchInfo = "üiğiüğğşğşsğaüğ",
                            BranchName = "Kickbox",
                            BranchPrice = 1700.0
                        },
                        new
                        {
                            BranchId = 3,
                            BranchInfo = "üiğiüğğşğşsğaüğ",
                            BranchName = "Zumba",
                            BranchPrice = 1500.0
                        },
                        new
                        {
                            BranchId = 4,
                            BranchInfo = "üiğiüğğşğşsğaüğ",
                            BranchName = "Pilates",
                            BranchPrice = 700.0
                        },
                        new
                        {
                            BranchId = 5,
                            BranchInfo = "üiğiüğğşğşsğaüğ",
                            BranchName = "Futbol",
                            BranchPrice = 15.699999999999999
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.CartLine", b =>
                {
                    b.Property<int>("CartLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartLineId"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartLineId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("CartLines", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Erkek Giyim"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Kadın Giyim"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Supplement"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentStar")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<string>("ContactContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Description", b =>
                {
                    b.Property<int>("DescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DescriptionId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DescriptionId");

                    b.HasIndex("BranchId");

                    b.ToTable("Descriptions", (string)null);

                    b.HasData(
                        new
                        {
                            DescriptionId = 1,
                            BranchId = 1,
                            DescriptionName = "Fitnes-1sweıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 2,
                            BranchId = 1,
                            DescriptionName = "Fitnes-2weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 3,
                            BranchId = 1,
                            DescriptionName = "Fitnes-3weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 4,
                            BranchId = 2,
                            DescriptionName = "Kickbox-1sweıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 5,
                            BranchId = 2,
                            DescriptionName = "Kickbox-2sweıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 6,
                            BranchId = 2,
                            DescriptionName = "Kickbox-3weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 7,
                            BranchId = 3,
                            DescriptionName = "Zumba-1weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 8,
                            BranchId = 3,
                            DescriptionName = "Zumba-2weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 9,
                            BranchId = 3,
                            DescriptionName = "Zumba-3weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 10,
                            BranchId = 4,
                            DescriptionName = "Pilates-1weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 11,
                            BranchId = 4,
                            DescriptionName = "Pilates-2weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 12,
                            BranchId = 4,
                            DescriptionName = "Pilates-3weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 13,
                            BranchId = 5,
                            DescriptionName = "Futbol-1weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 14,
                            BranchId = 5,
                            DescriptionName = "Futbol-2weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 15,
                            BranchId = 5,
                            DescriptionName = "Futbol-3weıpüqrıpoıqwmskdf"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("BranchId");

                    b.ToTable("Images", (string)null);

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            BranchId = 1,
                            ImageName = "fitness1.jpg"
                        },
                        new
                        {
                            ImageId = 2,
                            BranchId = 1,
                            ImageName = "fitness2.jpg"
                        },
                        new
                        {
                            ImageId = 3,
                            BranchId = 1,
                            ImageName = "fitness3.jpg"
                        },
                        new
                        {
                            ImageId = 4,
                            BranchId = 2,
                            ImageName = "kickbox1.jpg"
                        },
                        new
                        {
                            ImageId = 5,
                            BranchId = 2,
                            ImageName = "kickbox2.jpg"
                        },
                        new
                        {
                            ImageId = 6,
                            BranchId = 2,
                            ImageName = "kickbox3.jpg"
                        },
                        new
                        {
                            ImageId = 7,
                            BranchId = 3,
                            ImageName = "zumba1.jpg"
                        },
                        new
                        {
                            ImageId = 8,
                            BranchId = 3,
                            ImageName = "zumba2.jpg"
                        },
                        new
                        {
                            ImageId = 9,
                            BranchId = 3,
                            ImageName = "zumba3.jpg"
                        },
                        new
                        {
                            ImageId = 10,
                            BranchId = 4,
                            ImageName = "pilates1.jpg"
                        },
                        new
                        {
                            ImageId = 11,
                            BranchId = 4,
                            ImageName = "pilates2.jpg"
                        },
                        new
                        {
                            ImageId = 12,
                            BranchId = 4,
                            ImageName = "pilates3.jpg"
                        },
                        new
                        {
                            ImageId = 13,
                            BranchId = 5,
                            ImageName = "futbol1.jpg"
                        },
                        new
                        {
                            ImageId = 14,
                            BranchId = 5,
                            ImageName = "futbol2.jpg"
                        },
                        new
                        {
                            ImageId = 15,
                            BranchId = 5,
                            ImageName = "futbol3.jpg"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<string>("MemberEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberNameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MemberStatus")
                        .HasColumnType("bit");

                    b.Property<string>("MemberUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("Members", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.MemberBranch", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("MemberBranches", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.MemberTrainer", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "TrainerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("MemberTrainers", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Packet", b =>
                {
                    b.Property<int>("PacketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacketId"), 1L, 1);

                    b.Property<string>("PacketDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PacketPrice")
                        .HasColumnType("float");

                    b.Property<string>("PacketType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PacketId");

                    b.ToTable("Packets", (string)null);

                    b.HasData(
                        new
                        {
                            PacketId = 1,
                            PacketDescription = "Antrenman Planı, Beslenme Planı, Haftalık Kontrol",
                            PacketPrice = 1500.0,
                            PacketType = "Normal"
                        },
                        new
                        {
                            PacketId = 2,
                            PacketDescription = "Antrenman Planı, Beslenme Planı, Haftalık Kontrol, Bireysel Koç, Supplement Desteği",
                            PacketPrice = 6000.0,
                            PacketType = "Pro"
                        },
                        new
                        {
                            PacketId = 3,
                            PacketDescription = "Antrenman Planı, Beslenme Planı, Haftalık Kontrol, Bireysel Koç, Supplement Desteği, Whatsapp Görüşme, Pro Sporcularla Tanışma Fırsatı",
                            PacketPrice = 10000.0,
                            PacketType = "Jossoft Özel"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.PacketBranch", b =>
                {
                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("PacketId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("PacketBranches", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Jack & Jones",
                            ProductPrice = 200.0,
                            SubCategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Mavi",
                            ProductPrice = 200.0,
                            SubCategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "DeFacto",
                            ProductPrice = 200.0,
                            SubCategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Jack & Jones",
                            ProductPrice = 200.0,
                            SubCategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Pull & Bear",
                            ProductPrice = 200.0,
                            SubCategoryId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Lc Waikiki",
                            ProductPrice = 200.0,
                            SubCategoryId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Nike",
                            ProductPrice = 200.0,
                            SubCategoryId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Adidas",
                            ProductPrice = 200.0,
                            SubCategoryId = 3
                        },
                        new
                        {
                            ProductId = 9,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Under Armour",
                            ProductPrice = 200.0,
                            SubCategoryId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Nike",
                            ProductPrice = 200.0,
                            SubCategoryId = 4
                        },
                        new
                        {
                            ProductId = 11,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Puma",
                            ProductPrice = 200.0,
                            SubCategoryId = 4
                        },
                        new
                        {
                            ProductId = 12,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Adidas",
                            ProductPrice = 200.0,
                            SubCategoryId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Jack & Jones",
                            ProductPrice = 200.0,
                            SubCategoryId = 5
                        },
                        new
                        {
                            ProductId = 14,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Mavi",
                            ProductPrice = 200.0,
                            SubCategoryId = 5
                        },
                        new
                        {
                            ProductId = 15,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "DeFacto",
                            ProductPrice = 200.0,
                            SubCategoryId = 5
                        },
                        new
                        {
                            ProductId = 16,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Jack & Jones",
                            ProductPrice = 200.0,
                            SubCategoryId = 6
                        },
                        new
                        {
                            ProductId = 17,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Pull & Bear",
                            ProductPrice = 200.0,
                            SubCategoryId = 6
                        },
                        new
                        {
                            ProductId = 18,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Lc Waikiki",
                            ProductPrice = 200.0,
                            SubCategoryId = 6
                        },
                        new
                        {
                            ProductId = 19,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Nike",
                            ProductPrice = 200.0,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ProductId = 20,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Adidas",
                            ProductPrice = 200.0,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ProductId = 21,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Under Armour",
                            ProductPrice = 200.0,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ProductId = 22,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Nike",
                            ProductPrice = 200.0,
                            SubCategoryId = 8
                        },
                        new
                        {
                            ProductId = 23,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Puma",
                            ProductPrice = 200.0,
                            SubCategoryId = 8
                        },
                        new
                        {
                            ProductId = 24,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Adidas",
                            ProductPrice = 200.0,
                            SubCategoryId = 8
                        },
                        new
                        {
                            ProductId = 25,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Hardline",
                            ProductPrice = 200.0,
                            SubCategoryId = 9
                        },
                        new
                        {
                            ProductId = 26,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Protein Ocean",
                            ProductPrice = 200.0,
                            SubCategoryId = 9
                        },
                        new
                        {
                            ProductId = 27,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Swiss",
                            ProductPrice = 200.0,
                            SubCategoryId = 9
                        },
                        new
                        {
                            ProductId = 28,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Hardline",
                            ProductPrice = 200.0,
                            SubCategoryId = 10
                        },
                        new
                        {
                            ProductId = 29,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Protein Ocean",
                            ProductPrice = 200.0,
                            SubCategoryId = 10
                        },
                        new
                        {
                            ProductId = 30,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Swiss",
                            ProductPrice = 200.0,
                            SubCategoryId = 10
                        },
                        new
                        {
                            ProductId = 31,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Hardline",
                            ProductPrice = 200.0,
                            SubCategoryId = 11
                        },
                        new
                        {
                            ProductId = 32,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Protein Ocean",
                            ProductPrice = 200.0,
                            SubCategoryId = 11
                        },
                        new
                        {
                            ProductId = 33,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Swiss",
                            ProductPrice = 200.0,
                            SubCategoryId = 11
                        },
                        new
                        {
                            ProductId = 34,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Hardline",
                            ProductPrice = 200.0,
                            SubCategoryId = 12
                        },
                        new
                        {
                            ProductId = 35,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Protein Ocean",
                            ProductPrice = 200.0,
                            SubCategoryId = 12
                        },
                        new
                        {
                            ProductId = 36,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Swiss",
                            ProductPrice = 200.0,
                            SubCategoryId = 12
                        },
                        new
                        {
                            ProductId = 37,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Hardline",
                            ProductPrice = 200.0,
                            SubCategoryId = 13
                        },
                        new
                        {
                            ProductId = 38,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Protein Ocean",
                            ProductPrice = 200.0,
                            SubCategoryId = 13
                        },
                        new
                        {
                            ProductId = 39,
                            ProductDescription = "Erkek Tshirt",
                            ProductImage = "#",
                            ProductName = "Swiss",
                            ProductPrice = 200.0,
                            SubCategoryId = 13
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.ShippingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("ShippingDetails", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories", (string)null);

                    b.HasData(
                        new
                        {
                            SubCategoryId = 1,
                            CategoryId = 1,
                            SubCategoryImage = "#",
                            SubCategoryName = "Tshirt"
                        },
                        new
                        {
                            SubCategoryId = 2,
                            CategoryId = 1,
                            SubCategoryImage = "#",
                            SubCategoryName = "Sweatshirt"
                        },
                        new
                        {
                            SubCategoryId = 3,
                            CategoryId = 1,
                            SubCategoryImage = "#",
                            SubCategoryName = "Eşofman"
                        },
                        new
                        {
                            SubCategoryId = 4,
                            CategoryId = 1,
                            SubCategoryImage = "#",
                            SubCategoryName = "Ayakkabı"
                        },
                        new
                        {
                            SubCategoryId = 5,
                            CategoryId = 2,
                            SubCategoryImage = "#",
                            SubCategoryName = "Tshirt"
                        },
                        new
                        {
                            SubCategoryId = 6,
                            CategoryId = 2,
                            SubCategoryImage = "#",
                            SubCategoryName = "Sweatshirt"
                        },
                        new
                        {
                            SubCategoryId = 7,
                            CategoryId = 2,
                            SubCategoryImage = "#",
                            SubCategoryName = "Eşofman"
                        },
                        new
                        {
                            SubCategoryId = 8,
                            CategoryId = 2,
                            SubCategoryImage = "#",
                            SubCategoryName = "Ayakkabı"
                        },
                        new
                        {
                            SubCategoryId = 9,
                            CategoryId = 3,
                            SubCategoryImage = "#",
                            SubCategoryName = "Protein Tozu"
                        },
                        new
                        {
                            SubCategoryId = 10,
                            CategoryId = 3,
                            SubCategoryImage = "#",
                            SubCategoryName = "Gainer"
                        },
                        new
                        {
                            SubCategoryId = 11,
                            CategoryId = 3,
                            SubCategoryImage = "#",
                            SubCategoryName = "Kreatin"
                        },
                        new
                        {
                            SubCategoryId = 12,
                            CategoryId = 3,
                            SubCategoryImage = "#",
                            SubCategoryName = "PreWorkout"
                        },
                        new
                        {
                            SubCategoryId = 13,
                            CategoryId = 3,
                            SubCategoryImage = "#",
                            SubCategoryName = "BCAA"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainerId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainerId");

                    b.HasIndex("BranchId");

                    b.ToTable("Trainers", (string)null);

                    b.HasData(
                        new
                        {
                            TrainerId = 1,
                            BranchId = 1,
                            NameSurname = "Yusuf Dilekci",
                            TrainerDescription = "Fitness - Trainer - 1",
                            TrainerImage = "trainer1.jpg"
                        },
                        new
                        {
                            TrainerId = 2,
                            BranchId = 1,
                            NameSurname = "Savas Cebeci",
                            TrainerDescription = "Fitness - Trainer - 2",
                            TrainerImage = "trainer2.jpg"
                        },
                        new
                        {
                            TrainerId = 3,
                            BranchId = 2,
                            NameSurname = "Birol E.",
                            TrainerDescription = "Kickbox - Trainer - 1",
                            TrainerImage = "trainer3.jpg"
                        },
                        new
                        {
                            TrainerId = 4,
                            BranchId = 3,
                            NameSurname = "Mert A.",
                            TrainerDescription = "Zumba - Trainer - 1",
                            TrainerImage = "trainer4.jpg"
                        },
                        new
                        {
                            TrainerId = 5,
                            BranchId = 3,
                            NameSurname = "Azat T.",
                            TrainerDescription = "Zumba - Trainer - 2",
                            TrainerImage = "trainer5.jpg"
                        },
                        new
                        {
                            TrainerId = 6,
                            BranchId = 4,
                            NameSurname = "Oguz R.",
                            TrainerDescription = "Pilates - Trainer - 1",
                            TrainerImage = "trainer6.jpg"
                        },
                        new
                        {
                            TrainerId = 7,
                            BranchId = 5,
                            NameSurname = "Sadik S.",
                            TrainerDescription = "Futbol - 1",
                            TrainerImage = "trainer7.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Cart", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Member", "Member")
                        .WithOne("Cart")
                        .HasForeignKey("EntityLayer.Concrete.Cart", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CartLine", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Cart", "Cart")
                        .WithMany("CartLines")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Product", "Product")
                        .WithOne("CartLine")
                        .HasForeignKey("EntityLayer.Concrete.CartLine", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Comment", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Description", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("Descriptions")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Image", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("Images")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("EntityLayer.Concrete.MemberBranch", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("Members")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Member", "Member")
                        .WithMany("Branches")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("EntityLayer.Concrete.MemberTrainer", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Member", "Member")
                        .WithMany("Trainers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Trainer", "Trainer")
                        .WithMany("Members")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PacketBranch", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("Packets")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Packet", "Packet")
                        .WithMany("Branches")
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Product", b =>
                {
                    b.HasOne("EntityLayer.Concrete.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ShippingDetail", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Cart", "Cart")
                        .WithMany("ShippingDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SubCategory", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Trainer", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("Trainers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CoreLayer.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CoreLayer.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CoreLayer.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CoreLayer.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLayer.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CoreLayer.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Concrete.Branch", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Images");

                    b.Navigation("Members");

                    b.Navigation("Packets");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Cart", b =>
                {
                    b.Navigation("CartLines");

                    b.Navigation("ShippingDetails");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Member", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Cart");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Packet", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Product", b =>
                {
                    b.Navigation("CartLine");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Trainer", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
