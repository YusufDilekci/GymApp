// <auto-generated />
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20231103161346_BigMig")]
    partial class BigMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityLayer.Concrete.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"), 1L, 1);

                    b.Property<string>("BranchInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BranchPrice")
                        .HasColumnType("float");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            BranchInfo = "üiğiüğğşğşsğaüğ",
                            BranchName = "Fitness",
                            BranchPrice = 1200.0
                        },
                        new
                        {
                            BranchId = 2,
                            BranchInfo = "üiğiüğğşğşsğaüğ",
                            BranchName = "Kickbox",
                            BranchPrice = 1700.0
                        },
                        new
                        {
                            BranchId = 3,
                            BranchInfo = "üiğiüğğşğşsğaüğ",
                            BranchName = "Zumba",
                            BranchPrice = 1500.0
                        },
                        new
                        {
                            BranchId = 4,
                            BranchInfo = "üiğiüğğşğşsğaüğ",
                            BranchName = "Pilates",
                            BranchPrice = 700.0
                        },
                        new
                        {
                            BranchId = 5,
                            BranchInfo = "üiğiüğğşğşsğaüğ",
                            BranchName = "Futbol",
                            BranchPrice = 15.699999999999999
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<string>("ContactContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Description", b =>
                {
                    b.Property<int>("DescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DescriptionId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DescriptionId");

                    b.HasIndex("BranchId");

                    b.ToTable("Descriptions");

                    b.HasData(
                        new
                        {
                            DescriptionId = 1,
                            BranchId = 1,
                            DescriptionName = "Fitnes-1sweıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 2,
                            BranchId = 1,
                            DescriptionName = "Fitnes-2weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 3,
                            BranchId = 1,
                            DescriptionName = "Fitnes-3weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 4,
                            BranchId = 2,
                            DescriptionName = "Kickbox-1sweıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 5,
                            BranchId = 2,
                            DescriptionName = "Kickbox-2sweıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 6,
                            BranchId = 2,
                            DescriptionName = "Kickbox-3weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 7,
                            BranchId = 3,
                            DescriptionName = "Zumba-1weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 8,
                            BranchId = 3,
                            DescriptionName = "Zumba-2weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 9,
                            BranchId = 3,
                            DescriptionName = "Zumba-3weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 10,
                            BranchId = 4,
                            DescriptionName = "Pilates-1weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 11,
                            BranchId = 4,
                            DescriptionName = "Pilates-2weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 12,
                            BranchId = 4,
                            DescriptionName = "Pilates-3weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 13,
                            BranchId = 5,
                            DescriptionName = "Futbol-1weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 14,
                            BranchId = 5,
                            DescriptionName = "Futbol-2weıpüqrıpoıqwmskdf"
                        },
                        new
                        {
                            DescriptionId = 15,
                            BranchId = 5,
                            DescriptionName = "Futbol-3weıpüqrıpoıqwmskdf"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("BranchId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            BranchId = 1,
                            ImageName = "fitness1.jpg"
                        },
                        new
                        {
                            ImageId = 2,
                            BranchId = 1,
                            ImageName = "fitness2.jpg"
                        },
                        new
                        {
                            ImageId = 3,
                            BranchId = 1,
                            ImageName = "fitness3.jpg"
                        },
                        new
                        {
                            ImageId = 4,
                            BranchId = 2,
                            ImageName = "kickbox1.jpg"
                        },
                        new
                        {
                            ImageId = 5,
                            BranchId = 2,
                            ImageName = "kickbox2.jpg"
                        },
                        new
                        {
                            ImageId = 6,
                            BranchId = 2,
                            ImageName = "kickbox3.jpg"
                        },
                        new
                        {
                            ImageId = 7,
                            BranchId = 3,
                            ImageName = "zumba1.jpg"
                        },
                        new
                        {
                            ImageId = 8,
                            BranchId = 3,
                            ImageName = "zumba2.jpg"
                        },
                        new
                        {
                            ImageId = 9,
                            BranchId = 3,
                            ImageName = "zumba3.jpg"
                        },
                        new
                        {
                            ImageId = 10,
                            BranchId = 4,
                            ImageName = "pilates1.jpg"
                        },
                        new
                        {
                            ImageId = 11,
                            BranchId = 4,
                            ImageName = "pilates2.jpg"
                        },
                        new
                        {
                            ImageId = 12,
                            BranchId = 4,
                            ImageName = "pilates3.jpg"
                        },
                        new
                        {
                            ImageId = 13,
                            BranchId = 5,
                            ImageName = "futbol1.jpg"
                        },
                        new
                        {
                            ImageId = 14,
                            BranchId = 5,
                            ImageName = "futbol2.jpg"
                        },
                        new
                        {
                            ImageId = 15,
                            BranchId = 5,
                            ImageName = "futbol3.jpg"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<string>("MemberEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberNameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MemberStatus")
                        .HasColumnType("bit");

                    b.Property<string>("MemberUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("EntityLayer.Concrete.MemberBranch", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("MemberBranches");
                });

            modelBuilder.Entity("EntityLayer.Concrete.MemberTrainer", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "TrainerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("MemberTrainers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Packet", b =>
                {
                    b.Property<int>("PacketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacketId"), 1L, 1);

                    b.Property<string>("PacketDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PacketPrice")
                        .HasColumnType("float");

                    b.Property<string>("PacketType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PacketId");

                    b.ToTable("Packets");

                    b.HasData(
                        new
                        {
                            PacketId = 1,
                            PacketDescription = "Antrenman Planı, Beslenme Planı, Haftalık Kontrol",
                            PacketPrice = 1500.0,
                            PacketType = "Normal"
                        },
                        new
                        {
                            PacketId = 2,
                            PacketDescription = "Antrenman Planı, Beslenme Planı, Haftalık Kontrol, Bireysel Koç, Supplement Desteği",
                            PacketPrice = 6000.0,
                            PacketType = "Pro"
                        },
                        new
                        {
                            PacketId = 3,
                            PacketDescription = "Antrenman Planı, Beslenme Planı, Haftalık Kontrol, Bireysel Koç, Supplement Desteği, Whatsapp Görüşme, Pro Sporcularla Tanışma Fırsatı",
                            PacketPrice = 10000.0,
                            PacketType = "Jossoft Özel"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.PacketBranch", b =>
                {
                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("PacketId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("PacketBranches");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainerId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainerId");

                    b.HasIndex("BranchId");

                    b.ToTable("Trainers");

                    b.HasData(
                        new
                        {
                            TrainerId = 1,
                            BranchId = 1,
                            NameSurname = "Yusuf Dilekci",
                            TrainerDescription = "Fitness - Trainer - 1",
                            TrainerImage = "trainer1.jpg"
                        },
                        new
                        {
                            TrainerId = 2,
                            BranchId = 1,
                            NameSurname = "Savas Cebeci",
                            TrainerDescription = "Fitness - Trainer - 2",
                            TrainerImage = "trainer2.jpg"
                        },
                        new
                        {
                            TrainerId = 3,
                            BranchId = 2,
                            NameSurname = "Birol E.",
                            TrainerDescription = "Kickbox - Trainer - 1",
                            TrainerImage = "trainer3.jpg"
                        },
                        new
                        {
                            TrainerId = 4,
                            BranchId = 3,
                            NameSurname = "Mert A.",
                            TrainerDescription = "Zumba - Trainer - 1",
                            TrainerImage = "trainer4.jpg"
                        },
                        new
                        {
                            TrainerId = 5,
                            BranchId = 3,
                            NameSurname = "Azat T.",
                            TrainerDescription = "Zumba - Trainer - 2",
                            TrainerImage = "trainer5.jpg"
                        },
                        new
                        {
                            TrainerId = 6,
                            BranchId = 4,
                            NameSurname = "Oguz R.",
                            TrainerDescription = "Pilates - Trainer - 1",
                            TrainerImage = "trainer6.jpg"
                        },
                        new
                        {
                            TrainerId = 7,
                            BranchId = 5,
                            NameSurname = "Sadik S.",
                            TrainerDescription = "Futbol - 1",
                            TrainerImage = "trainer7.jpg"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Description", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("Descriptions")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Image", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("Images")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("EntityLayer.Concrete.MemberBranch", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("Members")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Member", "Member")
                        .WithMany("Branches")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("EntityLayer.Concrete.MemberTrainer", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Member", "Member")
                        .WithMany("Trainers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Trainer", "Trainer")
                        .WithMany("Members")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PacketBranch", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("Packets")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Packet", "Packet")
                        .WithMany("Branches")
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Trainer", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("Trainers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Branch", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Images");

                    b.Navigation("Members");

                    b.Navigation("Packets");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Member", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Packet", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Trainer", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
